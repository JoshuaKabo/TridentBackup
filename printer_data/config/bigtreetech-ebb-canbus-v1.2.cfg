# This file contains common pin mappings for the BIGTREETECH EBBCan
# Canbus board. To use this config, the firmware should be compiled for the
# STM32G0B1 with "8 MHz crystal" and "USB (on PA11/PA12)" or "CAN bus (on PB0/PB1)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

[mcu EBBCan]
# serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
canbus_uuid: 3eee7cffb4f0

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points: 150, 150, 50

[input_shaper]
# results from first input shape 4/7, lots of room for improvement
shaper_freq_x: 80.8
shaper_type_x: 2hump_ei
shaper_freq_y: 38.2
shaper_type_y: mzv

[extruder]
step_pin: EBBCan: PD0
dir_pin: !EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 32
rotation_distance: 22.19751507
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree - confirmed this Trident uses 1.8 degree 8/6/2024
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: MAX31865 
sensor_pin: EBBCan: PA4
spi_bus: spi1 
rtd_nominal_r: 1000
rtd_reference_r: 4300
rtd_num_of_wires: 2
gear_ratio: 50:10 # seems to have not changed between extruders
max_extrude_cross_section: 5 
pressure_advance: 0.02 # 0.02 found post XOL 3/24/25
pressure_advance_smooth_time: 0.040
# control: pid
# pid_Kp: 21.527
# pid_Ki: 1.063
# pid_Kd: 108.982
min_temp: -5
max_temp: 280
min_extrude_temp: 170
max_extrude_only_distance: 300.0
max_extrude_cross_section: 8 # added for KAMP's purge line outside adaptive mesh

[probe]
pin: EBBCan: PB8
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.6
stealthchop_threshold: 999999
interpolate: false
sense_resistor: 0.110

[fan]
# Part cooling fan
pin: EBBCan: PA0 # FAN1, middle connector on EBB36
max_power: 1.0 #(Was present on octopus)
kick_start_time: 0.5
# off_below: 0.10

[heater_fan hotend_fan]
pin: EBBCan: PA1 # next to hotend power, FAN2 on EBB36
heater: extruder
heater_temp: 50.0
kick_start_time: 0.5
# kick_start_time: 0.5 (Was present on octopus)
max_power: 1.0 #(Was present on octopus)
##  If you are experiencing back flow, you can reduce fan_speed
fan_speed: 1.0

# EBB36's temperature
[temperature_sensor EBBCan]
sensor_type: temperature_mcu
sensor_mcu: EBBCan
min_temp: 0
max_temp: 100