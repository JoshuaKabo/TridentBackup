# My custom macros
[save_variables]
filename: persistent_vars.cfg

[delayed_gcode CHAMBER_LIGHT_TIMEOUT]
gcode:
  SET_PIN PIN=caselight VALUE=0.00

[gcode_macro DEACTIVATE_CHAMBER_LIGHT]
gcode:
  SET_PIN PIN=caselight VALUE=0.00

[gcode_macro ACTIVATE_CHAMBER_LIGHT]
gcode:
  SET_PIN PIN=caselight VALUE=1.00
  update_delayed_gcode id=CHAMBER_LIGHT_TIMEOUT duration=60

# Homes only if necessary
[gcode_macro SMARTHOME]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
        M118 Printer is already homed
    {% else %}
        M118 Printer needs homing...
        {% set PREHOME_TEMP = printer.extruder.target %} ; save prehome temp before tap 150 safety overrides it (target is where it wants to be, maybe it's 80 and heating up to 210)
        G28
        M118 Re-applying pre-home temp...
        M109 S{ PREHOME_TEMP } ; re-instate the pre-home temp
    {% endif %}


[gcode_macro BED_TO_POS]
gcode:
  {% set pos = params.POS|default("150")|int %}
  {% set Zvel = printer.configfile.config["printer"]["max_z_accel"]|float %}
  SMARTHOME

  SAVE_GCODE_STATE NAME=pre_bed_move # save out status from before the move

  ## Set to absolute positioning.
  G90

  G0 Z{pos} F{Zvel}
  
  RESTORE_GCODE_STATE NAME=pre_bed_move

[gcode_macro BED_TO_TOP]
gcode:
  BED_TO_POS POS=10

[gcode_macro BED_TO_MID]
gcode:
  BED_TO_POS POS=150
  
[gcode_macro BED_TO_BOT]
gcode:
  BED_TO_POS POS=290
  

# From Ellis's tuning guide:
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                ; disable filament sensor - TODO: obtain filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-5} F6000   ; park toolhead at back center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                        ; enable filament sensor - TODO: obtain filament sensor
        #INITIAL_RGB                                                                 ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
  
[gcode_macro CLOSE_PROMPT]
gcode:
  RESPOND type="command" msg="action:prompt_end"

    
[gcode_macro PROMPT_UNLOAD_TEMP]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Swap Temp"
    RESPOND TYPE=command MSG="action:prompt_text Is the correct temperature for this filament targeted?"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Not Ready|CLOSE_PROMPT|warning"
    RESPOND TYPE=command MSG="action:prompt_button Ready|UNLOAD_TEMP_READY"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro PROMPT_LOAD_TEMP]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Swap Temp"
    RESPOND TYPE=command MSG="action:prompt_text Is the correct temperature for this filament targeted?"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Not Ready|CLOSE_PROMPT|warning"
    RESPOND TYPE=command MSG="action:prompt_button Ready|LOAD_TEMP_READY"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro PROMPT_LOAD_SUCCESS]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Swap Success"
    RESPOND TYPE=command MSG="action:prompt_text Was the swap handled successfully?"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Yes|FINISH_SUCCESSFUL_LOAD"
    RESPOND TYPE=command MSG="action:prompt_button No|RESET_FAILED_LOAD"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro RESET_FAILED_LOAD]
variable_unload_distance:  150
gcode:
    {% set speed = params.SPEED|default(200) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    CLOSE_PROMPT
    SAVE_GCODE_STATE NAME=reset_load_state
    G92 E0
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=reset_load_state
    LOAD_FILAMENT

[gcode_macro FINISH_SUCCESSFUL_LOAD]
variable_load_distance:  150
variable_purge_distance:  15
gcode:
  {% set speed = params.SPEED|default(200) %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
  CLOSE_PROMPT
  SAVE_GCODE_STATE NAME=finish_load_state
  G92 E0
  G1 E{purge_distance} F{speed} # purge
  M104 S{145} # set to a temp that is warm enough to remove the purge, but cool enough to not keep running (replace with a wipe later)
  RESTORE_GCODE_STATE NAME=finish_load_state
    

[gcode_macro UNLOAD_TEMP_READY]
variable_unload_distance:  150
variable_purge_distance:  15
variable_mvmnt_spd:  6000	 ; move speed in mm/min.
gcode:
    {% set extrude_speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    CLOSE_PROMPT
    SAVE_GCODE_STATE NAME=unload_state
    G90 ; set absolute positioning
    G92 E0
    G1 E{purge_distance} F{extrude_speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_TEMP_READY]
variable_load_distance:  150
variable_purge_distance:  15
variable_mvmnt_spd:  4000	 ; move speed in mm/min.
gcode:
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    CLOSE_PROMPT
    SAVE_GCODE_STATE NAME=load_state
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    PROMPT_LOAD_SUCCESS
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro LOAD_FILAMENT]
variable_mvmnt_spd:  4000	 ; move speed in mm/min.
gcode:
    {% if not 'xy' in printer.toolhead.homed_axes %}
      G28 X Y ; Home the X and Y axes, z will move down automatically
    {% endif %}
    G90 ; set absolute positioning
    G0 X150 Y20 F{mvmnt_spd}; Move to X=150, Y=20
    # TODO: move to purge bucket
    PROMPT_LOAD_TEMP # prompt if the temp is safe for load/unload


[gcode_macro UNLOAD_FILAMENT]
variable_mvmnt_spd:  4000	 ; move speed in mm/min.
gcode:
    {% if not 'xy' in printer.toolhead.homed_axes %}
      G28 X Y ; Home the X and Y axes, z will move down automatically
    {% endif %}
    G90 ; set absolute positioning
    G0 X150 Y20 F{mvmnt_spd}; Move to X=150, Y=20
    # TODO: move to purge bucket
    PROMPT_UNLOAD_TEMP # prompt if the temp is safe for load/unload

[gcode_macro PRINT_PERSISTENT_VARS]
gcode:
  {% set per_var_rec = printer.save_variables.variables %}
  m118 USE_ADAPTIVE_MESH: {per_var_rec.use_adaptive_mesh}
  m118 SHOULD_HEATSOAK: {per_var_rec.should_heatsoak}
  m118 SHOULD_WIPE: {per_var_rec.should_wipe}

[gcode_macro TOGGLE_USE_ADAPTIVE_MESH]
gcode:
  {% set per_var_rec = printer.save_variables.variables %}
  m118 setting use_adaptive_mesh to {not per_var_rec.use_adaptive_mesh}
  SAVE_VARIABLE VARIABLE=use_adaptive_mesh VALUE={not per_var_rec.use_adaptive_mesh}
  
[gcode_macro TOGGLE_SHOULD_HEATSOAK]
gcode:
  {% set per_var_rec = printer.save_variables.variables %}
  m118 setting should_heatsoak to {not per_var_rec.should_heatsoak}
  SAVE_VARIABLE VARIABLE=should_heatsoak VALUE={not per_var_rec.should_heatsoak}
  
[gcode_macro TOGGLE_SHOULD_WIPE]
gcode:
  {% set per_var_rec = printer.save_variables.variables %}
  m118 setting should_wipe to {not per_var_rec.should_wipe}
  SAVE_VARIABLE VARIABLE=should_wipe VALUE={not per_var_rec.should_wipe}

# [gcode_macro INIT_SAVE_VARS]
# gcode:
#   SAVE_VARIABLE VARIABLE=use_adaptive_mesh VALUE={True}
#   SAVE_VARIABLE VARIABLE=should_heatsoak VALUE={True}
#   SAVE_VARIABLE VARIABLE=should_wipe VALUE={True}

[gcode_macro UPDATE_DEF_BEDMESH]
gcode:
  {% set per_var_rec = printer.save_variables.variables %}
  M118 Heating Bed
  M190 S60 # Sets the target temp for the bed (with wait) NOTE: RETURN TO 105 WHEN I GET BACK TO PRINTING BIG STUFF
  M109 S140
  
  {% if per_var_rec.should_heatsoak %}
    M118 Soak for 10min
    G4 P570000                                          # Wait 9:30 for bedtemp
    M104 S145                                           # set nozzle preemptively, without waiting, to bed probe temp
    G4 P30000                                           # Wait the remaining 30 seconds for the hotend to hit safe temp
    M118 Done soaking
  {% endif %}


  # STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ) - Important - the environment has undergone thermal expansion at this point
  Z_TILT_ADJUST
  G28 Z                  # Home Z again
  G90                   # Absolute positioning

  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  M118 Bed Mesh
  # STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE             # Starts bed mesh
  BED_MESH_PROFILE SAVE=customdefault
